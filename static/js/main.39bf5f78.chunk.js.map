{"version":3,"sources":["api/questions.ts","api/questionApi.ts","components/multiplechoice/Answer.tsx","components/multiplechoice/Cheers.tsx","components/multiplechoice/Choices.tsx","components/multiplechoice/Question.tsx","components/scores/StarRating.tsx","components/scores/Result.tsx","pages/MultipleChoiceDeck.tsx","App.tsx","serviceWorker.ts","theme.js","index.tsx"],"names":["questions","id","question","choices","answer","getQuestion","index","length","getTotalNumberOfQuestions","Answer","text","visible","Box","Typography","variant","cheers","Cheers","positive","randomIndex","Math","floor","random","CheckCircle","width","style","fontSize","color","Cancel","useStyles","makeStyles","theme","label","typography","pxToRem","Choices","onChange","disabled","classes","React","useState","value","setValue","FormControl","component","RadioGroup","aria-label","name","event","selectedValue","target","map","FormControlLabel","control","Radio","Question","onNextQuestion","onSubmitQuestion","selectedAnswer","setSelectedAnswer","isCorrect","setIsCorrect","isActive","setIsActive","activeBtn","Button","size","onClick","Number","marginY","align","Grid","container","item","xs","choice","justifyContent","alignItems","renderHalfStars","Array","fill","_","StarHalf","renderEmptyStars","StarOutlined","StarRating","percentage","totalStars","rating","fullStarsLength","halfStarLength","emptyStarsLength","m","Star","Result","score","total","message","Paper","height","display","my","textAlign","MultipleChoiceDeck","setTotal","count","setCounter","setScore","isCompleted","setIsCompleted","setQuestion","useEffect","qapi","fetchQuestion","a","fetchTotalNumberOfQuestion","padding","counter","increment","App","Container","maxWidth","CssBaseline","Boolean","window","location","hostname","match","createTheme","root","palette","primary","main","secondary","error","warning","info","success","background","default","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.39bf5f78.chunk.js","sourcesContent":["import { QuestionType } from \"./types\";\n\nconst questions: QuestionType[] = [\n  {\n    id: 276,\n    question: \"Which among the choices is the correct phrasal verb?\",\n    choices: [\"result to\", \"result in\", \"result with\"],\n    answer: \"result in\",\n  },\n  {\n    id: 277,\n    question: \"Which among the choices is the correct phrasal verb?\",\n    choices: [\"share to\", \"share with\", \"share from\"],\n    answer: \"share with\",\n  },\n  {\n    id: 278,\n    question: \"Which among the choices is the correct phrasal verb?\",\n    choices: [\"sympathize with\", \"sympathize at\", \"sympathize to\"],\n    answer: \"sympathize with\",\n  },\n  {\n    id: 279,\n    question: \"Which among the choices is the correct phrasal verb?\",\n    choices: [\"believe at\", \"believe in\", \"believe on\"],\n    answer: \"believe in\",\n  },\n  {\n    id: 280,\n    question: \"Which among the choices is the correct phrasal verb?\",\n    choices: [\"made of\", \"made at\", \"made to\"],\n    answer: \"made of\",\n  },\n  {\n    id: 281,\n    question: \"Which among the choices is the correct phrasal verb?\",\n    choices: [\"agree on a plan\", \"agree to a plan\", \"agree at a plan\"],\n    answer: \"agree on a plan\",\n  },\n  {\n    id: 282,\n    question: \"Which among the choices is the correct phrasal verb?\",\n    choices: [\"compare to\", \"compare on\", \"compare from\"],\n    answer: \"compare to\",\n  },\n  {\n    id: 283,\n    question: \"Which among the choices is the correct phrasal verb?\",\n    choices: [\"conform to\", \"conform on\", \"conform in\"],\n    answer: \"conform to\",\n  },\n  {\n    id: 284,\n    question: \"Which among the choices is the correct phrasal verb?\",\n    choices: [\"rely on\", \"rely to\", \"rely in\"],\n    answer: \"rely on\",\n  },\n  {\n    id: 285,\n    question: \"Which among the choices is the correct phrasal verb?\",\n    choices: [\"dispose of\", \"dispose to\", \"dispose in\"],\n    answer: \"dispose of\",\n  },\n  {\n    id: 286,\n    question: \"Which among the choices is the correct phrasal verb?\",\n    choices: [\"take advantage of\", \"take advantage to\", \"take advantage on\"],\n    answer: \"take advantage of\",\n  },\n  {\n    id: 287,\n    question: \"Which among the choices is the correct phrasal verb?\",\n    choices: [\"taken care of\", \"taken cared of\", \"took cared of\"],\n    answer: \"taken care of\",\n  },\n  {\n    id: 288,\n    question: \"Which among the choices is the correct phrasal verb?\",\n    choices: [\"interest in\", \"interest on\", \"interest at\"],\n    answer: \"interest in\",\n  },\n  {\n    id: 289,\n    question: \"Which among the choices is the correct phrasal verb?\",\n    choices: [\"cope up with\", \"cope with\", \"cope on with\"],\n    answer: \"cope with\",\n  },\n  {\n    id: 290,\n    question: \"Which among the choices is the correct phrasal verb?\",\n    choices: [\"avail of\", \"avail on\", \"avail at\"],\n    answer: \"avail of\",\n  },\n];\n\nexport default questions;\n","import questions from \"./questions\";\nimport { QuestionType } from \"./types\";\n\n//TODO: Replace this with real backend\nfunction getQuestion(index: number): QuestionType | null {\n  if (index <= questions.length) {\n    return questions[index];\n  }\n  return null;\n}\n\nfunction getTotalNumberOfQuestions(): number {\n  return questions.length;\n}\n\nexport default { getQuestion, getTotalNumberOfQuestions };\n","import React from \"react\";\n\nimport { Box, Typography } from \"@material-ui/core\";\n\nexport type AnswerProps = {\n  text: string;\n  visible: boolean;\n};\n\nconst Answer: React.FC<AnswerProps> = ({ text, visible }: AnswerProps) => {\n  if (!visible) return null;\n  return (\n    <Box>\n      <Typography variant=\"subtitle1\">ANSWER</Typography>\n      <Typography variant=\"h4\">{text}</Typography>\n    </Box>\n  );\n};\n\nexport default Answer;\n","import React from \"react\";\nimport { Box, Typography } from \"@material-ui/core\";\nimport { Cancel, CheckCircle } from \"@material-ui/icons\";\n\nconst cheers: ReadonlyArray<string> = [\n  \"Awesome!\",\n  \"Good job!\",\n  \"Great!\",\n  \"Correct!\",\n  \"Keep up the good work!\",\n  \"You got it right!\",\n];\n\ntype CheersProps = { positive: boolean; visible: boolean };\n\nconst Cheers: React.FC<CheersProps> = ({ positive, visible }: CheersProps) => {\n  if (!visible) return null;\n\n  const randomIndex: number = Math.floor(Math.random() * cheers.length);\n\n  if (positive) {\n    return (\n      <>\n        <CheckCircle width=\"100%\" style={{ fontSize: 70 }} color=\"primary\" />\n        <Typography variant=\"h5\">{cheers[randomIndex]}</Typography>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Box>\n        <Cancel style={{ fontSize: 70 }} color=\"error\" />\n      </Box>\n    </>\n  );\n};\n\nexport default Cheers;\n","import React from \"react\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  label: {\n    fontSize: theme.typography.pxToRem(24),\n    color: \"#263238\",\n  },\n}));\n\nexport type ChoicesProps = {\n  choices: ReadonlyArray<string>;\n  onChange: (value: string) => void;\n  disabled?: boolean;\n};\n\nconst Choices: React.FC<ChoicesProps> = ({\n  choices,\n  onChange,\n  disabled,\n}: ChoicesProps) => {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(\"\");\n\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedValue = event.target.value;\n    setValue(selectedValue);\n    onChange(selectedValue);\n  };\n\n  return (\n    <FormControl component=\"fieldset\">\n      <RadioGroup\n        aria-label=\"choices\"\n        name=\"choices\"\n        value={value}\n        onChange={handleOnChange}\n      >\n        {choices.map((value: string, index: number) => (\n          <FormControlLabel\n            id={`choice-${index}`}\n            key={`choice-${index}`}\n            disabled={disabled}\n            value={value}\n            control={<Radio />}\n            color=\"primary\"\n            label={value}\n            classes={classes}\n          />\n        ))}\n      </RadioGroup>\n    </FormControl>\n  );\n};\n\nexport default Choices;\n","import React, { useState } from \"react\";\n\nimport { Box, Button, Grid, Typography } from \"@material-ui/core\";\n\nimport Answer from \"./Answer\";\nimport Cheers from \"./Cheers\";\nimport Choices from \"./Choices\";\n\nexport type QuestionProps = {\n  id: number;\n  question: string;\n  choices: ReadonlyArray<string>;\n  answer: string;\n  onNextQuestion: () => void;\n  onSubmitQuestion: (increment: number) => void;\n};\n\nconst Question: React.FC<QuestionProps> = ({\n  question,\n  choices,\n  answer,\n  onNextQuestion,\n  onSubmitQuestion,\n}: QuestionProps) => {\n  const [selectedAnswer, setSelectedAnswer] = useState<string>(\"\");\n  const [isCorrect, setIsCorrect] = useState<boolean>(false);\n  const [isActive, setIsActive] = useState<boolean>(true);\n\n  const onChange = (choice: string): void => {\n    setSelectedAnswer(choice);\n  };\n\n  const onSubmit = (): void => {\n    const isCorrect = selectedAnswer === answer;\n    setIsCorrect(isCorrect);\n    setIsActive(false);\n    onSubmitQuestion(Number(isCorrect));\n  };\n\n  const onNext = (): void => {\n    setIsActive(true);\n    setIsCorrect(false);\n    onNextQuestion();\n  };\n\n  const activeBtn = isActive ? (\n    <Button\n      aria-label=\"submit\"\n      variant=\"contained\"\n      color=\"primary\"\n      size=\"medium\"\n      onClick={onSubmit}\n    >\n      Submit\n    </Button>\n  ) : (\n    <Button\n      aria-label=\"next\"\n      variant=\"contained\"\n      color=\"primary\"\n      size=\"medium\"\n      onClick={onNext}\n    >\n      Next\n    </Button>\n  );\n\n  return (\n    <>\n      <Box marginY={2}>\n        <Typography variant=\"h4\" align=\"justify\">\n          {question}\n        </Typography>\n      </Box>\n      <br />\n      <Grid container>\n        <Grid item xs={7}>\n          <Choices choices={choices} onChange={onChange} disabled={!isActive} />\n        </Grid>\n        <Grid item xs={5}>\n          <Cheers visible={!isActive} positive={isCorrect} />\n          <Answer text={answer} visible={!isActive && !isCorrect} />\n        </Grid>\n      </Grid>\n      <br />\n      <br />\n      <Grid container justifyContent=\"flex-end\" alignItems=\"flex-end\">\n        {activeBtn}\n      </Grid>\n    </>\n  );\n};\n\nexport default Question;\n","import React from \"react\";\n\nimport { Box } from \"@material-ui/core\";\n\nimport { Star, StarHalf, StarOutlined } from \"@material-ui/icons\";\n\nexport type StarRatingProps = {\n  percentage: number;\n  totalStars: number;\n};\n\nfunction renderFullStars(length: number): React.ReactElement | null {\n  if (length === 0) return null;\n  return (\n    <>\n      {\" \"}\n      {Array(length)\n        .fill(null)\n        .map((_, index) => (\n          <Star\n            aria-label=\"full-star\"\n            style={{ color: \"orange\", fontSize: 50 }}\n            key={`full-star-${index}`}\n          />\n        ))}{\" \"}\n    </>\n  );\n}\n\nfunction renderHalfStars(length: number): React.ReactElement | null {\n  if (length === 0) return null;\n  return (\n    <>\n      {\" \"}\n      {Array(length)\n        .fill(null)\n        .map((_, index) => (\n          <StarHalf\n            aria-label=\"half-star\"\n            style={{ color: \"orange\", fontSize: 50 }}\n            color=\"primary\"\n            key={`half-star-${index}`}\n          />\n        ))}{\" \"}\n    </>\n  );\n}\n\nfunction renderEmptyStars(length: number): React.ReactElement | null {\n  if (length === 0) return null;\n  return (\n    <>\n      {\" \"}\n      {Array(length)\n        .fill(null)\n        .map((_, index) => (\n          <StarOutlined\n            aria-label=\"empty-star\"\n            style={{ color: \"gray\", fontSize: 50 }}\n            key={`empty-star-${index}`}\n          />\n        ))}{\" \"}\n    </>\n  );\n}\n\nconst StarRating: React.FC<StarRatingProps> = ({\n  percentage,\n  totalStars,\n}: StarRatingProps) => {\n  const rating = percentage * totalStars;\n  const fullStarsLength: number = Math.floor(rating);\n  const halfStarLength: number = rating - fullStarsLength > 0.5 ? 1 : 0;\n  const emptyStarsLength: number =\n    totalStars - fullStarsLength - halfStarLength;\n  return (\n    <Box m=\"auto\">\n      {renderFullStars(fullStarsLength)}\n      {renderHalfStars(halfStarLength)}\n      {renderEmptyStars(emptyStarsLength)}\n    </Box>\n  );\n};\n\nexport default StarRating;\n","import React from \"react\";\n\nimport { Box, Paper, Typography } from \"@material-ui/core\";\nimport StarRating from \"./StarRating\";\n\nconst TOTAL_STARS = 5;\nconst PASSING_RATE = 0.6;\n\nconst PASSED_MESSAGE = \"Awesome!\";\nconst FAILED_MESSAGE = \"Sorry! You've failed!\";\n\nexport type ResultProps = {\n  score: number;\n  total: number;\n};\n\nconst Result: React.FC<ResultProps> = ({ score, total }: ResultProps) => {\n  const percentage = score / total;\n  const message = percentage >= PASSING_RATE ? PASSED_MESSAGE : FAILED_MESSAGE;\n  return (\n    <Paper>\n      <Box height=\"80vh\" display=\"flex\" justifyContent=\"center\">\n        <Box my={10} textAlign=\"center\">\n          <Typography variant=\"h4\" color=\"textSecondary\">\n            {message}\n          </Typography>\n          <StarRating percentage={percentage} totalStars={TOTAL_STARS} />\n          <br />\n          <Typography variant=\"h5\" color=\"textSecondary\">\n            Your final score is\n          </Typography>\n          <Typography style={{ fontSize: 60 }} color=\"textSecondary\">\n            {`${score} / ${total}`}{\" \"}\n          </Typography>\n        </Box>\n      </Box>\n    </Paper>\n  );\n};\n\nexport default Result;\n","import React, { useState, useEffect } from \"react\";\n\nimport { Box, Paper, Typography } from \"@material-ui/core\";\n\nimport qapi from \"../api/questionApi\";\nimport { QuestionType } from \"../api/types\";\n\nimport Question from \"../components/multiplechoice/Question\";\nimport Result from \"../components/scores/Result\";\n\nconst MultipleChoiceDeck: React.FC = () => {\n  const [total, setTotal] = useState<number>(0);\n  const [count, setCounter] = useState<number>(0);\n  const [score, setScore] = useState<number>(0);\n  const [isCompleted, setIsCompleted] = useState<boolean>(false);\n  const [question, setQuestion] = useState<QuestionType | null>(null);\n\n  useEffect(() => {\n    function fetchQuestion(): void {\n      const question = qapi.getQuestion(0);\n      setQuestion(question);\n    }\n    fetchQuestion();\n  }, []);\n\n  useEffect(() => {\n    async function fetchTotalNumberOfQuestion(): Promise<void> {\n      const total = qapi.getTotalNumberOfQuestions();\n      setTotal(total);\n    }\n    fetchTotalNumberOfQuestion();\n  }, []);\n\n  const onNextQuestion = (): void => {\n    if (count === total - 1) {\n      setIsCompleted(true);\n    }\n    const counter = count + 1;\n    setCounter(counter);\n    setQuestion(qapi.getQuestion(counter));\n  };\n\n  const onSubmitQuestion = (increment: number): void => {\n    if (count <= total - 1) {\n      setScore(score + increment);\n    }\n  };\n\n  if (isCompleted) {\n    return <Result score={score} total={total} />;\n  }\n\n  return (\n    <Paper>\n      <Box height=\"80vh\" padding={4}>\n        <Box textAlign=\"right\">\n          <Typography variant=\"h3\">\n            {\" \"}\n            {count + 1} / {total}{\" \"}\n          </Typography>\n        </Box>\n        <br />\n        <Box height=\"75%\">\n          {question ? (\n            <Question\n              {...question}\n              onNextQuestion={onNextQuestion}\n              onSubmitQuestion={onSubmitQuestion}\n            />\n          ) : null}\n        </Box>\n      </Box>\n    </Paper>\n  );\n};\n\nexport default MultipleChoiceDeck;\n","import React from \"react\";\n\nimport { Box, Container } from \"@material-ui/core\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nimport MultipleChoiceDeck from \"./pages/MultipleChoiceDeck\";\n\nconst App: React.FC = () => {\n  return (\n    <Container maxWidth=\"sm\">\n      <CssBaseline />\n      <Box my={10}>\n        <MultipleChoiceDeck />\n      </Box>\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createTheme } from \"@material-ui/core/styles\";\n\nconst theme = createTheme({\n  root: {\n    display: \"flex\",\n  },\n  palette: {\n    primary: {\n      main: \"#006f3c\",\n    },\n    secondary: {\n      main: \"#f9a73e\",\n    },\n    error: {\n      main: \"#bf212f\",\n    },\n    warning: {\n      main: \"#264b96\",\n    },\n    info: {\n      main: \"#264b96\",\n    },\n    success: {\n      main: \"#f9a73e\",\n    },\n    background: {\n      default: \"#b2dfdb\",\n    },\n  },\n});\n\nexport default theme;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport theme from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}